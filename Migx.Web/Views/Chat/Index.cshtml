@model Migx.Web.Models.UsuarioModel

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@*<div class="container">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />
    <ul id="discussion"></ul>
</div>*@

<div style="width: 55%; border: solid 1px Red; height: 40px">
    <h3 style="margin: 10px 0px 0px 10px">
        <span id="spnName"></span>
        <span id="connID"></span>
        <span id="usersCount"></span>
    </h3>
</div>
<div style="width: 55%; border: solid 1px Red; height: auto">
    <div style="height: auto" id="divUsers"></div>
    <div style="height: 70%" id="divChat"></div>
    <div style="border: dashed 1px Black; margin-top:5%;">
        <div style="float: left; width: 20%; padding: 4px">
            <input type="text" style="width: 100%" id="txtTo" />
        </div>
        <div style="float: left; width: 60%; padding: 4px">
            <input type="text" style="width: 100%" id="txtMsg" />
        </div>
        <div style="float: right; width: 15%; padding: 4px">
            <input type="button" id="btnSend" value="Send Message" style="width: 45px" />
        </div>
    </div>
</div>

@section scripts{
    <!--Script references. -->
<!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
<!--Reference the SignalR library. -->
<script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>
<!--SignalR script to update the chat page and send messages.-->

<script type="text/javascript">
        $(document).ready(function () {
            var _name = '@Model.Nome';
            $("#spnName").text(_name);
            $('#txtMsg').val('');

            //Get proxy instance using the auto-generated proxy class
            var chatProxy = $.connection.signalRChatHub;
            //chatProxy.client.foo = function () { };
            // Bind the btnClick event when connection to the hub is started
            $.connection.hub.start().done(function () {

                try {
                    $.connection.signalRChatHub.server.hubconnect($("#spnName").text(), $("#connID").text(), $("#connID").text());
                } catch (e) { alert(e.message); }

                $("#btnSend").click(function () {
                    // Send Message to the Hub using the proxy instance
                    if ($("#txtTo").val() == "") {
                        chatProxy.server.broadCastMessage($("#spnName").text(), $("#txtMsg").val());
                    }
                    else {
                        chatProxy.server.send_PrivateMessage($("#spnName").text(), $("#txtMsg").val(), $("#txtTo").val());
                    }
                    $('#txtMsg').val('').focus();
                })
            })
            //Callback function which the hub will call when it has finished processing,
            // is attached to the proxy
            chatProxy.client.receiveMessage = function (msgFrom, msg, senderid) {
                if (msgFrom == "NewConnection") {
                    $("#usersCount").text(senderid);
                    $('#divUsers').append('<li>' + msg+ '</li>')
                }
                else if (msgFrom == "ChatHub")
                {
                    $("#usersCount").text(senderid);
                    $("#connID").text(msg);
                }
                else if (msgFrom == "RU") {
                    var online = senderid.split('#');
                    var length = online.length;
                    for (var i = 0; i < length; i++) {
                        $('#divUsers').append('<li>' + online[i] + '</li>')
                    }

                    $('#divChat').append('<li><strong>' + msgFrom
                        + '</strong>:&nbsp;&nbsp;' + msg + '</li>')
                }
                else {
                    $("#txtTo").val(senderid);
                    $('#divChat').append('<li><strong>' + msgFrom
                        + '</strong>:&nbsp;&nbsp;' + msg + '</li>')
                }
            };
        });

        function registerEvents(chatHub) {
            try {
                chatHub.server.connect($("#spnName").text(), $("#connID").text(), $("#connID").text());
            } catch (e) { alert(e.message); }
        }
</script>    
}





@*@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}*@